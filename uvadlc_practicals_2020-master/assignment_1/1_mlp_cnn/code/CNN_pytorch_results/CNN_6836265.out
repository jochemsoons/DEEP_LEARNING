learning_rate : 0.0001
max_steps : 5000
batch_size : 32
eval_freq : 500
data_dir : ./cifar10/cifar-10-batches-py
Device: cuda
ConvNet(
  (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (preact1): Sequential(
    (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (preact2_a): Sequential(
    (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (preact2_b): Sequential(
    (0): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (conv2): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (preact3_a): Sequential(
    (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (preact3_b): Sequential(
    (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (conv3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
  (maxpool3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (preact4_a): Sequential(
    (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (preact4_b): Sequential(
    (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (maxpool4): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (preact5_a): Sequential(
    (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (preact5_b): Sequential(
    (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): ReLU()
    (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (maxpool5): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (ReLu): ReLU()
  (linear): Linear(in_features=512, out_features=10, bias=True)
)
STEP 500/5000 | test acc: 0.5877, test loss: 1.1770 | train acc: 0.4823, train loss: 1.5018
STEP 1000/5000 | test acc: 0.6711, test loss: 0.9384 | train acc: 0.6438, train loss: 1.0383
STEP 1500/5000 | test acc: 0.7142, test loss: 0.8147 | train acc: 0.6933, train loss: 0.8857
STEP 2000/5000 | test acc: 0.7563, test loss: 0.7069 | train acc: 0.7666, train loss: 0.6892
STEP 2500/5000 | test acc: 0.7734, test loss: 0.6758 | train acc: 0.7802, train loss: 0.6505
STEP 3000/5000 | test acc: 0.7792, test loss: 0.6427 | train acc: 0.7879, train loss: 0.6065
STEP 3500/5000 | test acc: 0.7919, test loss: 0.6125 | train acc: 0.8444, train loss: 0.4610
STEP 4000/5000 | test acc: 0.8035, test loss: 0.5797 | train acc: 0.8599, train loss: 0.4157
STEP 4500/5000 | test acc: 0.8058, test loss: 0.5673 | train acc: 0.8536, train loss: 0.4307
STEP 5000/5000 | test acc: 0.8199, test loss: 0.5446 | train acc: 0.9052, train loss: 0.2932
